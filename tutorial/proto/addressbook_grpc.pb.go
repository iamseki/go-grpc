// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddressBookInfoClient is the client API for AddressBookInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddressBookInfoClient interface {
	AddAddress(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Void, error)
	FindAddresses(ctx context.Context, in *Void, opts ...grpc.CallOption) (*AddressBook, error)
}

type addressBookInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressBookInfoClient(cc grpc.ClientConnInterface) AddressBookInfoClient {
	return &addressBookInfoClient{cc}
}

func (c *addressBookInfoClient) AddAddress(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/proto.AddressBookInfo/addAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressBookInfoClient) FindAddresses(ctx context.Context, in *Void, opts ...grpc.CallOption) (*AddressBook, error) {
	out := new(AddressBook)
	err := c.cc.Invoke(ctx, "/proto.AddressBookInfo/findAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressBookInfoServer is the server API for AddressBookInfo service.
// All implementations must embed UnimplementedAddressBookInfoServer
// for forward compatibility
type AddressBookInfoServer interface {
	AddAddress(context.Context, *Person) (*Void, error)
	FindAddresses(context.Context, *Void) (*AddressBook, error)
	mustEmbedUnimplementedAddressBookInfoServer()
}

// UnimplementedAddressBookInfoServer must be embedded to have forward compatible implementations.
type UnimplementedAddressBookInfoServer struct {
}

func (UnimplementedAddressBookInfoServer) AddAddress(context.Context, *Person) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddress not implemented")
}
func (UnimplementedAddressBookInfoServer) FindAddresses(context.Context, *Void) (*AddressBook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAddresses not implemented")
}
func (UnimplementedAddressBookInfoServer) mustEmbedUnimplementedAddressBookInfoServer() {}

// UnsafeAddressBookInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressBookInfoServer will
// result in compilation errors.
type UnsafeAddressBookInfoServer interface {
	mustEmbedUnimplementedAddressBookInfoServer()
}

func RegisterAddressBookInfoServer(s grpc.ServiceRegistrar, srv AddressBookInfoServer) {
	s.RegisterService(&AddressBookInfo_ServiceDesc, srv)
}

func _AddressBookInfo_AddAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressBookInfoServer).AddAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AddressBookInfo/addAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressBookInfoServer).AddAddress(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressBookInfo_FindAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressBookInfoServer).FindAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AddressBookInfo/findAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressBookInfoServer).FindAddresses(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// AddressBookInfo_ServiceDesc is the grpc.ServiceDesc for AddressBookInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddressBookInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AddressBookInfo",
	HandlerType: (*AddressBookInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addAddress",
			Handler:    _AddressBookInfo_AddAddress_Handler,
		},
		{
			MethodName: "findAddresses",
			Handler:    _AddressBookInfo_FindAddresses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tutorial/proto/addressbook.proto",
}
